name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
    paths:
      - "k8s-manifests/**"  # Triggers if Kubernetes manifests are updated
      - "frontend/**"        # Triggers if frontend code is updated
      - "backend/**"         # Triggers if backend code is updated
  workflow_dispatch:        # Allows for manual triggering

jobs:
  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    env:
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}          # VM public IP
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}    # SSH private key
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}  # ACR login server from Azure secrets
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}          # ACR username from Azure secrets
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}          # ACR password from Azure secrets
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Create ACR Image Pull Secret on Kubernetes VM
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << EOF
            kubectl create namespace my-namespace || true  # Avoid errors if namespace exists
            kubectl delete secret acr-auth -n my-namespace || true  # Remove existing secret if any
            kubectl create secret docker-registry acr-auth \
              --docker-server=${{ env.ACR_LOGIN_SERVER }} \
              --docker-username=${{ env.ACR_USERNAME }} \
              --docker-password=${{ env.ACR_PASSWORD }} \
              --docker-email=odl_user_1468642@seneca-caa900naa.cloudlabs.ai \
              -n my-namespace
          EOF

      - name: Copy Kubernetes Manifests to VM
        run: |
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem k8s-manifests/*.yaml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      - name: SSH into VM and Apply Kubernetes Configs
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << EOF
            kubectl apply -f /home/azureuser/mongodb_deployment.yaml -n my-namespace
            kubectl apply -f /home/azureuser/backend_deployment.yaml -n my-namespace
            kubectl apply -f /home/azureuser/frontend_deployment.yaml -n my-namespace
          EOF
